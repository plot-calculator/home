{"version":3,"sources":["logo.svg","OutlinedInputAdornments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","OutlinedInputAdornments","state","replicates","splot","wplot","handleChange","prop","event","_this","setState","Object","defineProperty","target","value","classes","this","props","console","log","react_default","a","createElement","className","root","TextField_default","id","classNames","margin","textField","variant","label","onChange","InputProps","startAdornment","InputAdornment_default","position","material_table_default","columns","title","field","type","data","reps","split","whole","options","columnsButton","exportButton","React","Component","withStyles","theme","display","flexWrap","spacing","unit","flexBasis","App","Fragment","CssBaseline_default","src_OutlinedInputAdornments","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8SCqBlCC,6MACJC,MAAQ,CACNC,WAAY,EACZC,MAAO,EACPC,MAAO,KAKTC,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAOC,EAAMK,OAAOC,kFAG9B,IACCC,EAAYC,KAAKC,MAAjBF,QAKR,OAJAG,QAAQC,IAAIH,KAAKd,MAAMC,YAKrBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EAAQS,MACtBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,GAAG,kCACHH,UAAWI,IAAWZ,EAAQa,OAAQb,EAAQc,WAC9CC,QAAQ,WACRC,MAAM,aACNjB,MAAOE,KAAKd,MAAMC,WAClB6B,SAAUhB,KAAKV,aAAa,cAC5B2B,WAAY,CACVC,eAAgBd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAgBe,SAAS,SAAzB,QAGpBhB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,GAAG,kCACHH,UAAWI,IAAWZ,EAAQa,OAAQb,EAAQc,WAC9CC,QAAQ,WACRC,MAAM,wBACNjB,MAAOE,KAAKd,MAAME,MAClB4B,SAAUhB,KAAKV,aAAa,SAC5B2B,WAAY,CACVC,eAAgBd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAgBe,SAAS,SAAzB,QAGpBhB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,GAAG,kCACHH,UAAWI,IAAWZ,EAAQa,OAAQb,EAAQc,WAC9CC,QAAQ,WACRC,MAAM,wBACNjB,MAAOE,KAAKd,MAAMG,MAClB2B,SAAUhB,KAAKV,aAAa,SAC5B2B,WAAY,CACVC,eAAgBd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAgBe,SAAS,SAAzB,QAGpBhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,QAAS,CACP,CAAEC,MAAO,aAAcC,MAAO,OAAQC,KAAM,WAC5C,CAAEF,MAAO,wBAAyBC,MAAO,QAASC,KAAM,WACxD,CAAEF,MAAO,wBAAyBC,MAAO,QAASC,KAAM,YAE1DC,KAAM,CACJ,CAAEC,KAAM,EAAGC,MAAO,EAAGC,MAAO,GAC5B,CAAEF,KAAM,EAAGC,MAAO,EAAGC,MAAO,IAE9BN,MAAM,kBACNO,QAAS,CACPC,eAAe,EACfC,cAAc,aAnEYC,IAAMC,WA+E7BC,uBA5FA,SAAAC,GAAK,MAAK,CACvB5B,KAAM,CACJ6B,QAAS,OACTC,SAAU,QAEZ1B,OAAQ,CACNA,OAAQwB,EAAMG,QAAQC,MAExB3B,UAAW,CACT4B,UAAW,OAmFAN,CAAmBlD,GCnFnByD,mLATX,OACEtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,SAAP,KACEvC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,MACAD,EAAAC,EAAAC,cAACuC,EAAD,cALUX,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3810eae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MaterialTable from 'material-table';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  textField: {\r\n    flexBasis: 200,\r\n  },\r\n});\r\n\r\nclass OutlinedInputAdornments extends React.Component {\r\n  state = {\r\n    replicates: 0,\r\n    splot: 0,\r\n    wplot: 0\r\n  };\r\n\r\n  \r\n\r\n  handleChange = prop => event => {\r\n    this.setState({ [prop]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    console.log(this.state.replicates);\r\n\r\n\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <TextField\r\n          id=\"outlined-simple-start-adornment\"\r\n          className={classNames(classes.margin, classes.textField)}\r\n          variant=\"outlined\"\r\n          label=\"Replicates\"\r\n          value={this.state.replicates}\r\n          onChange={this.handleChange('replicates')}\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"outlined-simple-start-adornment\"\r\n          className={classNames(classes.margin, classes.textField)}\r\n          variant=\"outlined\"\r\n          label=\"Split Plot Treatments\"\r\n          value={this.state.splot}\r\n          onChange={this.handleChange('splot')}\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"outlined-simple-start-adornment\"\r\n          className={classNames(classes.margin, classes.textField)}\r\n          variant=\"outlined\"\r\n          label=\"Whole Plot Treatments\"\r\n          value={this.state.wplot}\r\n          onChange={this.handleChange('wplot')}\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n          }}\r\n        />\r\n        <MaterialTable\r\n          columns={[\r\n            { title: 'Replicates', field: 'reps', type: 'numeric' },\r\n            { title: 'Split Plot Treatments', field: 'split', type: 'numeric' },\r\n            { title: 'Whole Plot Treatments', field: 'whole', type: 'numeric' }\r\n          ]}\r\n          data={[\r\n            { reps: 3, split: 3, whole: 1},\r\n            { reps: 3, split: 2, whole: 1},\r\n          ]}\r\n          title=\"Plot Calculator\"\r\n          options={{\r\n            columnsButton: true,\r\n            exportButton: true,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOutlinedInputAdornments.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OutlinedInputAdornments);\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport OutlinedInputAdornments from './OutlinedInputAdornments';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <OutlinedInputAdornments />       \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}